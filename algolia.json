[{"author":null,"categories":null,"content":null,"date":1540423920,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1540423920,"objectID":"","permalink":"https://luckyliang.github.io/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1540423920,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"home","lang":"en","lastmod":1540423920,"objectID":"","permalink":"https://luckyliang.github.io/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"Cheng Blog","type":"page","url":"/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1540423920,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1540423920,"objectID":"","permalink":"https://luckyliang.github.io/tags/go/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/go/","section":"tags","summary":"","tags":null,"title":"go","type":"tags","url":"/tags/go/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1540423920,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1540423920,"objectID":"","permalink":"https://luckyliang.github.io/categories/go/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/go/","section":"categories","summary":"","tags":null,"title":"go","type":"categories","url":"/categories/go/","weight":0,"wordcount":0},{"author":null,"categories":["go"],"content":"go 操作mysql的简单用","date":1540423920,"description":"go 操作mysql的简单用","dir":"post/go/","excerpt_html":"go 操作mysql的简单用","excerpt_text":"go 操作mysql的简单用","expirydate":-62135596800,"fuzzywordcount":1800,"html":"go 操作mysql的简单用","keywords":null,"kind":"page","lang":"en","lastmod":1540423920,"objectID":"25f1ba4793c720d03c7df18982011b73","permalink":"https://luckyliang.github.io/2018/10/24/goopmysql/","publishdate":"2018-10-24T23:32:00Z","readingtime":4,"relpermalink":"/2018/10/24/goopmysql/","section":"post","summary":"使用Go操作MySQL等数据库，一般有两种方式：一是使用database/sql接口，直接在代码里硬编码sql语句；二是使用gorm，即对象","tags":["go"],"title":"go 操作 mysql","type":"post","url":"/2018/10/24/goOpMysql/","weight":0,"wordcount":1706},{"author":null,"categories":null,"content":null,"date":1540423920,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1540423920,"objectID":"","permalink":"https://luckyliang.github.io/post/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/","section":"post","summary":"","tags":null,"title":"Posts","type":"post","url":"/post/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1540423920,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1540423920,"objectID":"","permalink":"https://luckyliang.github.io/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1540337520,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1540337520,"objectID":"","permalink":"https://luckyliang.github.io/tags/mysql/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/mysql/","section":"tags","summary":"","tags":null,"title":"MySQL","type":"tags","url":"/tags/mysql/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"这里主要参考官方文档，记录简单用法","date":1540337520,"description":"这里主要参考官方文档，记录简单用法","dir":"post/Other/","excerpt_html":"这里主要参考官方文档，记录简单用法","excerpt_text":"这里主要参考官方文档，记录简单用法","expirydate":-62135596800,"fuzzywordcount":2600,"html":"这里主要参考官方文档，记录简单用法","keywords":null,"kind":"page","lang":"en","lastmod":1540337520,"objectID":"a77e081f878613552177735c67c910bc","permalink":"https://luckyliang.github.io/2018/10/23/mysqlleaning/","publishdate":"2018-10-23T23:32:00Z","readingtime":6,"relpermalink":"/2018/10/23/mysqlleaning/","section":"post","summary":"MySQL基本使用 安装就不介绍了，网上多的很，这里主要参考官方文档，记录简单用法 MySQL连接和断开 连接mysql mysql -h host -u user -p Enter password: ******** host 连接的","tags":["MySQL"],"title":"MySQL基本使用方法","type":"post","url":"/2018/10/23/MySqlLeaning/","weight":0,"wordcount":2514},{"author":null,"categories":null,"content":null,"date":1524489622,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1524489622,"objectID":"","permalink":"https://luckyliang.github.io/tags/ios/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/ios/","section":"tags","summary":"","tags":null,"title":"IOS","type":"tags","url":"/tags/ios/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1524489622,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1524489622,"objectID":"","permalink":"https://luckyliang.github.io/categories/ios/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/ios/","section":"categories","summary":"","tags":null,"title":"IOS","type":"categories","url":"/categories/ios/","weight":0,"wordcount":0},{"author":null,"categories":["IOS"],"content":"Swift RXSwift 源码阅读，原理简单分析","date":1524489622,"description":"Swift RXSwift 源码阅读，原理简单分析","dir":"post/ios/","excerpt_html":"Swift RXSwift 源码阅读，原理简单分析","excerpt_text":"Swift RXSwift 源码阅读，原理简单分析","expirydate":-62135596800,"fuzzywordcount":100,"html":"Swift RXSwift 源码阅读，原理简单分析","keywords":null,"kind":"page","lang":"en","lastmod":1524489622,"objectID":"972f194ac494fa2e0ae192297d3e81d8","permalink":"https://luckyliang.github.io/2018/04/23/swiftrxsiwft1/","publishdate":"2018-04-23T13:20:22Z","readingtime":0,"relpermalink":"/2018/04/23/swiftrxsiwft1/","section":"post","summary":"","tags":["IOS","Swift"],"title":"RXSwift - 原理分析","type":"post","url":"/2018/04/23/swiftRXSiwft1/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1524489622,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1524489622,"objectID":"","permalink":"https://luckyliang.github.io/tags/swift/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/swift/","section":"tags","summary":"","tags":null,"title":"Swift","type":"tags","url":"/tags/swift/","weight":0,"wordcount":0},{"author":null,"categories":["IOS"],"content":"Swift 中 Moya 原理简单分析","date":1524256268,"description":"Swift 中 Moya 原理简单分析","dir":"post/ios/","excerpt_html":"Swift 中 Moya 原理简单分析","excerpt_text":"Swift 中 Moya 原理简单分析","expirydate":-62135596800,"fuzzywordcount":100,"html":"Swift 中 Moya 原理简单分析","keywords":null,"kind":"page","lang":"en","lastmod":1524256268,"objectID":"52f1f20aa0b0d395024d3baa02488308","permalink":"https://luckyliang.github.io/2018/04/20/swifturlmoyadetail/","publishdate":"2018-04-20T20:31:08Z","readingtime":0,"relpermalink":"/2018/04/20/swifturlmoyadetail/","section":"post","summary":"","tags":["IOS","Swift"],"title":"Moya - 源码解析","type":"post","url":"/2018/04/20/swiftURlMoyaDetail/","weight":0,"wordcount":0},{"author":null,"categories":["IOS"],"content":"Swift 中 Moya三方框架的配置和使用","date":1524241800,"description":"Swift 中 Moya三方框架的配置和使用","dir":"post/ios/","excerpt_html":"Swift 中 Moya三方框架的配置和使用","excerpt_text":"Swift 中 Moya三方框架的配置和使用","expirydate":-62135596800,"fuzzywordcount":2700,"html":"Swift 中 Moya三方框架的配置和使用","keywords":null,"kind":"page","lang":"en","lastmod":1524241800,"objectID":"0f28dbc1ac71601ae2d2b37296a510ba","permalink":"https://luckyliang.github.io/2018/04/20/swifturlmoya/","publishdate":"2018-04-20T16:30:00Z","readingtime":6,"relpermalink":"/2018/04/20/swifturlmoya/","section":"post","summary":"Moya是基于Alamofire网络框架上进行的封装，支持RXSwift 创建模型 import Foundation /// 实用泛行实现通用格式 public struct ResponseData\u0026lt;T\u0026gt;: Codable where T: Codable { let code: String let message: String let data: T?","tags":["IOS","Swift"],"title":"Swift网络请求 - RXSwift + PromiseKit + Moya","type":"post","url":"/2018/04/20/swiftURlMoya/","weight":0,"wordcount":2654},{"author":null,"categories":["IOS"],"content":"Swift 中Alamofire源码简单分析","date":1524155400,"description":"Swift 中Alamofire源码简单分析","dir":"post/ios/","excerpt_html":"Swift 中Alamofire源码简单分析","excerpt_text":"Swift 中Alamofire源码简单分析","expirydate":-62135596800,"fuzzywordcount":100,"html":"Swift 中Alamofire源码简单分析","keywords":null,"kind":"page","lang":"en","lastmod":1524155400,"objectID":"9eccc0b06fa706b7e9e3a83ccaf8bdf4","permalink":"https://luckyliang.github.io/2018/04/19/swifturlalamofiredetail/","publishdate":"2018-04-19T16:30:00Z","readingtime":0,"relpermalink":"/2018/04/19/swifturlalamofiredetail/","section":"post","summary":"","tags":["IOS","Swift"],"title":"Alamofire源码解析","type":"post","url":"/2018/04/19/swiftURlAlamofireDetail/","weight":0,"wordcount":0},{"author":null,"categories":["IOS"],"content":"Swift 中Alamofire网络请求简单封装","date":1524083400,"description":"Swift 中Alamofire网络请求简单封装","dir":"post/ios/","excerpt_html":"Swift 中Alamofire网络请求简单封装","excerpt_text":"Swift 中Alamofire网络请求简单封装","expirydate":-62135596800,"fuzzywordcount":2800,"html":"Swift 中Alamofire网络请求简单封装","keywords":null,"kind":"page","lang":"en","lastmod":1524083400,"objectID":"be0a2ccb91611526022661234ced4d10","permalink":"https://luckyliang.github.io/2018/04/18/swifturlalamofire/","publishdate":"2018-04-18T20:30:00Z","readingtime":6,"relpermalink":"/2018/04/18/swifturlalamofire/","section":"post","summary":"一个简单的get请求接口为例，搭建一个比较完整的网络框架，其中包括Session管理，路由和错误处理 这里以获取用户文章列表接口为例 创建模型 ///","tags":["IOS","Swift"],"title":"Siwft网络请求 - Alamofire","type":"post","url":"/2018/04/18/swiftURlAlamofire/","weight":0,"wordcount":2775},{"author":null,"categories":["IOS"],"content":"Swift 中URLSession网络请求简单应用，get,post,文件上传，文件下载","date":1524080400,"description":"Swift 中URLSession网络请求简单应用，get,post,文件上传，文件下载","dir":"post/ios/","excerpt_html":"Swift 中URLSession网络请求简单应用，get,post,文件上传，文件下载","excerpt_text":"Swift 中URLSession网络请求简单应用，get,post,文件上传，文件下载","expirydate":-62135596800,"fuzzywordcount":1500,"html":"Swift 中URLSession网络请求简单应用，get,post,文件上传，文件下载","keywords":null,"kind":"page","lang":"en","lastmod":1524080400,"objectID":"0953c1026a501fa8f2d814c2d96261b9","permalink":"https://luckyliang.github.io/2018/04/18/swifturlsession/","publishdate":"2018-04-18T19:40:00Z","readingtime":3,"relpermalink":"/2018/04/18/swifturlsession/","section":"post","summary":"URLSession功能 NSURLSession 支持 http2.0 协议 在处理下载任务的时候可以直接把数据下载到磁盘 支持后台下载与上传 同一个 session 发送多个请求，只需要建立一次连接（","tags":["IOS","Swift"],"title":"Siwft网络请求 - URLSession","type":"post","url":"/2018/04/18/swiftURlSession/","weight":0,"wordcount":1441},{"author":null,"categories":["IOS"],"content":"Swift PromisKit常用使用方法","date":1523997068,"description":"Swift PromisKit常用使用方法","dir":"post/ios/","excerpt_html":"Swift PromisKit常用使用方法","excerpt_text":"Swift PromisKit常用使用方法","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Swift PromisKit常用使用方法","keywords":null,"kind":"page","lang":"en","lastmod":1523997068,"objectID":"f251bd76ca5bd5fb4c3b2fa3b6f1f5c3","permalink":"https://luckyliang.github.io/2018/04/17/swiftpromiskit/","publishdate":"2018-04-17T20:31:08Z","readingtime":3,"relpermalink":"/2018/04/17/swiftpromiskit/","section":"post","summary":"promistKit主要是解决异步回调地狱的问题，举个例子，比如需要下载一个图片文件，而且这个图片文件的下载链接也需要请求，也就是先请求一个","tags":["IOS","Swift"],"title":"Swift - PromisKit使用","type":"post","url":"/2018/04/17/swiftPromisKit/","weight":0,"wordcount":1229},{"author":null,"categories":["IOS"],"content":"记录在Swift开发中常用的小技巧，方便忘记的时候查阅","date":1523647320,"description":"记录在Swift开发中常用的小技巧，方便忘记的时候查阅","dir":"post/ios/","excerpt_html":"记录在Swift开发中常用的小技巧，方便忘记的时候查阅","excerpt_text":"记录在Swift开发中常用的小技巧，方便忘记的时候查阅","expirydate":-62135596800,"fuzzywordcount":200,"html":"记录在Swift开发中常用的小技巧，方便忘记的时候查阅","keywords":null,"kind":"page","lang":"en","lastmod":1523647320,"objectID":"bc553b698c3170f64f7a5179d9029851","permalink":"https://luckyliang.github.io/2018/04/13/swifttipsrecord/","publishdate":"2018-04-13T19:22:00Z","readingtime":1,"relpermalink":"/2018/04/13/swifttipsrecord/","section":"post","summary":"Swift 记录 通过字符串初始化类 比如有个类名为URLSessionViewController，在Swift中通过字符串来初始化 ///规则：项目名.","tags":["IOS","Swift"],"title":"Siwft 小技巧记录","type":"post","url":"/2018/04/13/swiftTipsRecord/","weight":0,"wordcount":114},{"author":null,"categories":["go"],"content":"初学go语言，收集一些平时学习时遇到的错误和坑","date":1523561520,"description":"初学go语言，收集一些平时学习时遇到的错误和坑","dir":"post/go/","excerpt_html":"初学go语言，收集一些平时学习时遇到的错误和坑","excerpt_text":"初学go语言，收集一些平时学习时遇到的错误和坑","expirydate":-62135596800,"fuzzywordcount":200,"html":"初学go语言，收集一些平时学习时遇到的错误和坑","keywords":null,"kind":"page","lang":"en","lastmod":1523561520,"objectID":"70fc215b87cab094d219328b8c8f9a59","permalink":"https://luckyliang.github.io/2018/04/12/goerror/","publishdate":"2018-04-12T19:32:00Z","readingtime":1,"relpermalink":"/2018/04/12/goerror/","section":"post","summary":"ListenAndServe: listen tcp: address 3000: missing port in address exit status 1 学习go net/http包，代码如下 func getNews(writer http.ResponseWriter, request *http.Request) { writer.Write([]byte(\u0026quot;hello\u0026quot;)) } func main() { http.HandleFunc(\u0026quot;/getNews\u0026quot;,getNews) log.Println(\u0026quot;Listening....\u0026quot;) err := http.ListenAndServe(\u0026quot;3000\u0026quot;,nil) if err != nil { log.Fatal(\u0026quot;ListenAndServe: \u0026quot;, err) } } 执行命令 $ go run main.go","tags":["go"],"title":"go 错误收集","type":"post","url":"/2018/04/12/goerror/","weight":0,"wordcount":138},{"author":null,"categories":["IOS"],"content":"ios底层原理一 探寻OC对象本质","date":1523439120,"description":"ios底层原理一 探寻OC对象本质","dir":"post/ios/","excerpt_html":"ios底层原理一 探寻OC对象本质","excerpt_text":"ios底层原理一 探寻OC对象本质","expirydate":-62135596800,"fuzzywordcount":6600,"html":"ios底层原理一 探寻OC对象本质","keywords":null,"kind":"page","lang":"en","lastmod":1523439120,"objectID":"67f9c96b3bd693b7f71ef4a003d56f6e","permalink":"https://luckyliang.github.io/2018/04/11/iosunderlying_ocobjectessence/","publishdate":"2018-04-11T09:32:00Z","readingtime":14,"relpermalink":"/2018/04/11/iosunderlying_ocobjectessence/","section":"post","summary":"IOS底层原理总结 - 探寻oc对象的本质 面试题：一个NSObject对象占用多少内存？ 探寻OC对象的本质，我们平时编写的Objective-C","tags":["IOS","Objective-C"],"title":"IOS底层原理一  探寻OC对象本质","type":"post","url":"/2018/04/11/iosunderlying_ocobjectessence/","weight":0,"wordcount":6517},{"author":null,"categories":null,"content":null,"date":1523439120,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1523439120,"objectID":"","permalink":"https://luckyliang.github.io/tags/objective-c/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/objective-c/","section":"tags","summary":"","tags":null,"title":"Objective-C","type":"tags","url":"/tags/objective-c/","weight":0,"wordcount":0},{"author":null,"categories":["go"],"content":"主要记录go如和处理web数据处理的，包括get,post,文件上传，文件下载，数据返回格式","date":1520969121,"description":"主要记录go如和处理web数据处理的，包括get,post,文件上传，文件下载，数据返回格式","dir":"post/go/","excerpt_html":"主要记录go如和处理web数据处理的，包括get,post,文件上传，文件下载，数据返回格式","excerpt_text":"主要记录go如和处理web数据处理的，包括get,post,文件上传，文件下载，数据返回格式","expirydate":-62135596800,"fuzzywordcount":3200,"html":"主要记录go如和处理web数据处理的，包括get,post,文件上传，文件下载，数据返回格式","keywords":null,"kind":"page","lang":"en","lastmod":1520969121,"objectID":"7570e3ba3a67be5f5607bf32866cc1e8","permalink":"https://luckyliang.github.io/2018/03/13/gorequest/","publishdate":"2018-03-13T19:25:21Z","readingtime":7,"relpermalink":"/2018/03/13/gorequest/","section":"post","summary":"web应用非常重要的功能之一就是接受来自客户端发起的请求，然后返回数据以完成与客服端的数据交互，这篇文章主要记录go在处理这些数据请求时常用","tags":["go"],"title":"go - 处理web请求","type":"post","url":"/2018/03/13/goRequest/","weight":0,"wordcount":3149},{"author":null,"categories":["go"],"content":"HttpRouter是一个轻量级但却非常高效的multiplexer。本篇文章主要记录HttpRouter一些基础使用方法","date":1520886923,"description":"HttpRouter是一个轻量级但却非常高效的multiplexer。本篇文章主要记录HttpRouter一些基础使用方法","dir":"post/go/","excerpt_html":"HttpRouter是一个轻量级但却非常高效的multiplexer。本篇文章主要记录HttpRouter一些基础使用方法","excerpt_text":"HttpRouter是一个轻量级但却非常高效的multiplexer。本篇文章主要记录HttpRouter一些基础使用方法","expirydate":-62135596800,"fuzzywordcount":5200,"html":"HttpRouter是一个轻量级但却非常高效的multiplexer。本篇文章主要记录HttpRouter一些基础使用方法","keywords":null,"kind":"page","lang":"en","lastmod":1520886923,"objectID":"e40c00a148eadad8001989e1b76ee0ba","permalink":"https://luckyliang.github.io/2018/03/12/gohttprouter/","publishdate":"2018-03-12T20:35:23Z","readingtime":11,"relpermalink":"/2018/03/12/gohttprouter/","section":"post","summary":"安装 HttpRouter go get github.com/julienschmidt/httprouter 认识httprouter package main import ( \u0026quot;fmt\u0026quot; \u0026quot;log\u0026quot; \u0026quot;net/http\u0026quot; \u0026quot;github.com/julienschmidt/httprouter\u0026quot; ) func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) { fmt.Fprint(w, \u0026quot;Welcome!\\n\u0026quot;) } func main() { router := httprouter.New() router.GET(\u0026quot;/\u0026quot;, Index) log.Fatal(http.ListenAndServe(\u0026quot;:3000\u0026quot;, router)) } 执行go run main.go 然后在浏览器输入http://","tags":["go"],"title":"go - httprouter高性能Http框架","type":"post","url":"/2018/03/12/gohttprouter/","weight":0,"wordcount":5132},{"author":null,"categories":["go"],"content":"理解net/http 后端服务简单使用方法，方便自己调式和理解前后台数据交互","date":1520713960,"description":"理解net/http 后端服务简单使用方法，方便自己调式和理解前后台数据交互","dir":"post/go/","excerpt_html":"理解net/http 后端服务简单使用方法，方便自己调式和理解前后台数据交互","excerpt_text":"理解net/http 后端服务简单使用方法，方便自己调式和理解前后台数据交互","expirydate":-62135596800,"fuzzywordcount":1400,"html":"理解net/http 后端服务简单使用方法，方便自己调式和理解前后台数据交互","keywords":null,"kind":"page","lang":"en","lastmod":1520713960,"objectID":"ebfb08ed3d162dfefec416120a7e40b0","permalink":"https://luckyliang.github.io/2018/03/10/gonet/","publishdate":"2018-03-10T20:32:40Z","readingtime":3,"relpermalink":"/2018/03/10/gonet/","section":"post","summary":"Go 语言中处理 HTTP 请求主要跟两个东西相关：ServeMux 和 Handler。 ServrMux：本质上是一个 HTTP 请求路由器,它把收到的请求与一组预先","tags":["go"],"title":"go - net/http的简单使用","type":"post","url":"/2018/03/10/gonet/","weight":0,"wordcount":1360},{"author":null,"categories":null,"content":null,"date":1518341520,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1518341520,"objectID":"","permalink":"https://luckyliang.github.io/tags/nasm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/nasm/","section":"tags","summary":"","tags":null,"title":"nasm","type":"tags","url":"/tags/nasm/","weight":0,"wordcount":0},{"author":null,"categories":["汇编"],"content":"mac平台 nasm 汇编器环境搭建","date":1518341520,"description":"mac平台 nasm 汇编器环境搭建","dir":"post/asm/","excerpt_html":"mac平台 nasm 汇编器环境搭建","excerpt_text":"mac平台 nasm 汇编器环境搭建","expirydate":-62135596800,"fuzzywordcount":600,"html":"mac平台 nasm 汇编器环境搭建","keywords":null,"kind":"page","lang":"en","lastmod":1518341520,"objectID":"e34cf2cde27cee9a301787fe524a9530","permalink":"https://luckyliang.github.io/2018/02/11/nasminstall/","publishdate":"2018-02-11T09:32:00Z","readingtime":2,"relpermalink":"/2018/02/11/nasminstall/","section":"post","summary":"一. 安装NASM NASM网站： https://www.nasm.us/ 点击Downloads 到下载页面，下载最新安装包 点击展开包，点击x x x.tar.gz包 下载 双击下载的包解压，","tags":["nasm"],"title":"NASM 环境搭建","type":"post","url":"/2018/02/11/nasminstall/","weight":0,"wordcount":506},{"author":null,"categories":null,"content":null,"date":1518341520,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1518341520,"objectID":"","permalink":"https://luckyliang.github.io/categories/%E6%B1%87%E7%BC%96/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/%E6%B1%87%E7%BC%96/","section":"categories","summary":"","tags":null,"title":"汇编","type":"categories","url":"/categories/%E6%B1%87%E7%BC%96/","weight":0,"wordcount":0},{"author":null,"categories":["go"],"content":"go学习笔记 - 错误处理","date":1518204900,"description":"go学习笔记 - 错误处理","dir":"post/go/","excerpt_html":"go学习笔记 - 错误处理","excerpt_text":"go学习笔记 - 错误处理","expirydate":-62135596800,"fuzzywordcount":4400,"html":"go学习笔记 - 错误处理","keywords":null,"kind":"page","lang":"en","lastmod":1518204900,"objectID":"4fd532e41029aae38a24457879eb5340","permalink":"https://luckyliang.github.io/2018/02/09/goerror/","publishdate":"2018-02-09T19:35:00Z","readingtime":9,"relpermalink":"/2018/02/09/goerror/","section":"post","summary":"错误指出程序中的异常情况。假设我们正在尝试打开一个文件，文件系统中不存在这个文件。这是一个异常情况，它表示为一个错误。 Go中的错误也是一种类","tags":["go"],"title":"Go 学习笔记（七） - 错误处理","type":"post","url":"/2018/02/09/goError/","weight":0,"wordcount":4351},{"author":null,"categories":["go"],"content":"读go圣经学习笔记 - 接口","date":1518129900,"description":"读go圣经学习笔记 - 接口","dir":"post/go/","excerpt_html":"读go圣经学习笔记 - 接口","excerpt_text":"读go圣经学习笔记 - 接口","expirydate":-62135596800,"fuzzywordcount":2700,"html":"读go圣经学习笔记 - 接口","keywords":null,"kind":"page","lang":"en","lastmod":1518129900,"objectID":"268098921ea32e293e1ff03bef136490","permalink":"https://luckyliang.github.io/2018/02/08/gointerface/","publishdate":"2018-02-08T22:45:00Z","readingtime":6,"relpermalink":"/2018/02/08/gointerface/","section":"post","summary":"在Go中，接口是一组方法签名。当类型为接口中的所有方法提供定义时，它被称为实现接口。 接口的定义语法 定义接口 /* 定义接口 */ type interface_name interface { method_name1 [return_type] method_name2 [return_type] method_name3 [return_type] ...","tags":["go"],"title":"Go 学习笔记（六） - 接口","type":"post","url":"/2018/02/08/gointerface/","weight":0,"wordcount":2661},{"author":null,"categories":["go"],"content":"读go圣经学习笔记 - 方法","date":1518115320,"description":"读go圣经学习笔记 - 方法","dir":"post/go/","excerpt_html":"读go圣经学习笔记 - 方法","excerpt_text":"读go圣经学习笔记 - 方法","expirydate":-62135596800,"fuzzywordcount":1400,"html":"读go圣经学习笔记 - 方法","keywords":null,"kind":"page","lang":"en","lastmod":1518115320,"objectID":"fef6294acac1f56c384a8c4bddd5c534","permalink":"https://luckyliang.github.io/2018/02/08/gomethod/","publishdate":"2018-02-08T18:42:00Z","readingtime":3,"relpermalink":"/2018/02/08/gomethod/","section":"post","summary":"方法声明 package geometry import \u0026quot;math\u0026quot; type Point struct{ X, Y float64 } // traditional function func Distance(p, q Point) float64 { return math.Hypot(q.X-p.X, q.Y-p.Y) } // same thing, but as a method of the Point type func (p Point) Distance(q Point) float64 { return math.Hypot(q.X-p.X, q.Y-p.Y) } 在方法调用过程中，接收器参数一般会在方法","tags":["go"],"title":"Go 学习笔记（五） - 方法","type":"post","url":"/2018/02/08/gomethod/","weight":0,"wordcount":1389},{"author":null,"categories":["go"],"content":"读go圣经学习笔记 - 函数","date":1518045154,"description":"读go圣经学习笔记 - 函数","dir":"post/go/","excerpt_html":"读go圣经学习笔记 - 函数","excerpt_text":"读go圣经学习笔记 - 函数","expirydate":-62135596800,"fuzzywordcount":3300,"html":"读go圣经学习笔记 - 函数","keywords":null,"kind":"page","lang":"en","lastmod":1518045154,"objectID":"b6d7772e486c0b4152f0507b7060aed1","permalink":"https://luckyliang.github.io/2018/02/07/gofunc/","publishdate":"2018-02-07T23:12:34Z","readingtime":7,"relpermalink":"/2018/02/07/gofunc/","section":"post","summary":"函数 函数声明 函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。 func name(parameter-list) (result-list) { body } 返回值列表描述了函数返回值的变量名以及类型，如果一","tags":["go"],"title":"Go 学习笔记（四） - 函数","type":"post","url":"/2018/02/07/gofunc/","weight":0,"wordcount":3249},{"author":null,"categories":["go"],"content":"读go圣经学习笔记 - 复合类型","date":1517949540,"description":"读go圣经学习笔记 - 复合类型","dir":"post/go/","excerpt_html":"读go圣经学习笔记 - 复合类型","excerpt_text":"读go圣经学习笔记 - 复合类型","expirydate":-62135596800,"fuzzywordcount":4900,"html":"读go圣经学习笔记 - 复合类型","keywords":null,"kind":"page","lang":"en","lastmod":1517949540,"objectID":"50f578dfb14b2fa9fffea712fc196c92","permalink":"https://luckyliang.github.io/2018/02/06/gocomplextype/","publishdate":"2018-02-06T20:39:00Z","readingtime":10,"relpermalink":"/2018/02/06/gocomplextype/","section":"post","summary":"复合数据类型 数组 数组是一个由固定长度的特定类型元素组成的序列，因为数组的长度是固定的，因此在Go语言中很少直接使用数组 数组的每个元素可以通过","tags":["go"],"title":"Go 学习笔记（三） - 复合类型","type":"post","url":"/2018/02/06/goComplexType/","weight":0,"wordcount":4801},{"author":null,"categories":["go"],"content":"读go圣经学习笔记 - 基础数据类型","date":1517866320,"description":"读go圣经学习笔记 - 基础数据类型","dir":"post/go/","excerpt_html":"读go圣经学习笔记 - 基础数据类型","excerpt_text":"读go圣经学习笔记 - 基础数据类型","expirydate":-62135596800,"fuzzywordcount":4000,"html":"读go圣经学习笔记 - 基础数据类型","keywords":null,"kind":"page","lang":"en","lastmod":1517866320,"objectID":"672d8ee1ecd4076d93f84159c5e8702a","permalink":"https://luckyliang.github.io/2018/02/05/gobasetype/","publishdate":"2018-02-05T21:32:00Z","readingtime":8,"relpermalink":"/2018/02/05/gobasetype/","section":"post","summary":"基础数据类型 Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。 基础类型：数字、字符串和布尔型等 复合数据类型：数组和结构体，","tags":["go"],"title":"Go 学习笔记（二） - 基础数据类型","type":"post","url":"/2018/02/05/gobaseType/","weight":0,"wordcount":3997},{"author":null,"categories":["go"],"content":"读go圣经学习笔记 - 程序结构","date":1517859120,"description":"读go圣经学习笔记 - 程序结构","dir":"post/go/","excerpt_html":"读go圣经学习笔记 - 程序结构","excerpt_text":"读go圣经学习笔记 - 程序结构","expirydate":-62135596800,"fuzzywordcount":2400,"html":"读go圣经学习笔记 - 程序结构","keywords":null,"kind":"page","lang":"en","lastmod":1517859120,"objectID":"a3059380affee5e226fc877a0c54f71c","permalink":"https://luckyliang.github.io/2018/02/05/gostructure/","publishdate":"2018-02-05T19:32:00Z","readingtime":5,"relpermalink":"/2018/02/05/gostructure/","section":"post","summary":"程序结构 命名 Go语言中的函数名、变量名、常量名、类型名、语句标号和包名等所有的命名，都遵循一个简单的命名规则：一个名字必须以一个字母（Uni","tags":["go"],"title":"Go 学习笔记（一） - 程序结构","type":"post","url":"/2018/02/05/goStructure/","weight":0,"wordcount":2346},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/ios/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"925f539e32d1f90b96a88dea3db4c932","permalink":"https://luckyliang.github.io/post/ios/swift-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8D%8F%E8%AE%AE/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/ios/swift-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8D%8F%E8%AE%AE/","section":"post","summary":"序列  Sequence 协议是集合类型结构中的基础。 一个序列 (sequence) 代表的是一系列具有相同类型 的值，你可以对这些值进行迭代。\n for element in someSequence { doSomething(with: element) }  满足 Sequence 协议的要求十分简单，你需要做的所有事情就是提供一个返回迭代器 (iterator) 的 makeIterator() 方法:\nprotocol Sequence { associatedtype Iterator: IteratorProtocol func makeIterator() -\u0026gt; Iterator // ... }  迭代器 序列通过创建一个迭代器来提供对元素的访问。 迭代器每次产生一个序列的值，并且当遍历序 列时对遍历状态进行管理。在 IteratorProtocol 协议中唯一的一个方法是 next()，这个方法需 要在每次被调用时返回序列中的下一个值。当序列被耗尽时，next() 应该返回 nil:\nprotocol IteratorProtocol { associatedtype Element mutating func next() -\u0026gt; Element? }  for 循环其实是下面这段代码 的一种简写形式:\nvar iterator = someSequence.makeIterator() while let element = iterator.","tags":null,"title":"","type":"post","url":"/post/ios/swift-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E5%8D%8F%E8%AE%AE/","weight":0,"wordcount":206},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://luckyliang.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://luckyliang.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/about/","section":"top","summary":"","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"54ccacff97b96806d49760361ef17350","permalink":"https://luckyliang.github.io/top/books/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/books/","section":"top","summary":"","tags":null,"title":"","type":"top","url":"/top/books/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://luckyliang.github.io/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/","section":"search","summary":"","tags":null,"title":"Searches","type":"search","url":"/search/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://luckyliang.github.io/top/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/","section":"top","summary":"","tags":null,"title":"Tops","type":"top","url":"/top/","weight":0,"wordcount":0}]